begin 社团活动数据模型

    
    @Entity
    1.成员，共有属性从Person类继承，特有属性(权限)
    @Entity
    2.例会，每次例会单独作为一条记录，每个部门对都可选择在例会后留作业或不留作业
        primary-key (部门ID，例会次数)，others(地点，例会摘要)
    @Entity
    3.作业，记录作业的属性
        primary-key(部门ID，例会次数)，others(作业内容，开始时间，截止时间，规范命名，文件ID)
    @Relation
    4.交作业，primary-key(部门ID，例会次数，成员ID),others(提交时间，部长打分)

    
    5.文件管理，主要管理各种文件的属性
    primary-key(文件ID)，others(文件名，文件扩展名，成员ID，文件访问权限，路径)

    @Relation ManyToMany
    6.部长，记录成员中的部长以及所管理的部门，其他属性继承自成员
        primary-key(成员ID，部门ID)，others(头衔，部长简介text，部长其他非文本文件)
    @Entity
    7.部门，记录部门的相关属性
        primary-key(部门ID)，others(部门名称，部门创建时间，部门简介...(部门的其他属性))
    @Relation ManyToMany
    8.部门成员，记录部门和成员的关系
        primary-key(部门ID，成员ID)，others(NULL)
    @Entity
    9.主席团，记录主席团成员
        primary-key(成员ID，头衔)
    
    @Relation
    10.签到表，记录签到情况
        primary-key(成员ID，部门ID，例会次数)

end 社团活动数据模型

begin 招新数据模型
    1.申请人，共有属性从Person中继承
    2.

begin 招新
    1.确定部门种类和信息
    2.设置部门管理人员
    3.设置招新展示页面：(内容能从后台管理界面更新)
        社团基本情况
        部长简介
        部门设置
        获得荣誉
        对外交流
    4.登陆/注册
end 招新

begin 面试
    1.权限>=部长
    2.搜索——姓名，意向部门
    3.显示所有基本信息+是否通过(对勾)
end 面试

begin 日常社团运作

    1.确定例会的相关信息(设置默认信息，如时间，地点)
    (2.推送)
    3.例会摘要
    4.成员属性+是否签到，由部长签到
    5.如果有作业，由部长设置开始时间和截止时间，作业要求，规范命名写死，格式为：部门名-例会次数-成员名-成员ID
        存储命名：UTC时间戳-原文件名
    6.如果有作业，成员来提交作业，前端判定截止时间，超过截止时间提交按钮应不能点击，C层判定作业提交时间
        超过时间的作业不向数据库中提交，数据库中不做判定
    7.如果有作业，部长应及时打分，百分制，允许部长打分和改动
        如果同一个人有一次例会的多次作业提交，覆盖掉旧的记录，并删除相应文件
        多次/单词提交，分数默认-1，-1代表没有被打分的作业，数据库层由此选择并呈现给部长
        分数限制在 [0-100]
        打分需要显示成员信息，下载作业(下载文件)，手动输入分数(正则匹配)

end 日常社团运作

begin 按照流程确定接口
1.前端存有 部门ID ，但不显示，通过部门ID（edit 部门 权限不够 不出现edit按钮）
2.session类内 id ps存入js  <form action=post 标签 或者 直接修改>  id ps->c层 ->  js页面right wrong  
end 按照流程确定接口




